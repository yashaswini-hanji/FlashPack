# Quark SE board, it has an CLTAP controlling the cores (but not the same as
# in Quark), a LMT 3.5 core and an ARC core.

# scan_chain
jtag newtap quark_se arc-em -irlen 4  -irmask 0x0f  -expected-id   0x200044b1  -disable
jtag newtap quark_se lmt    -irlen 8  -irmask 0xff  -expected-id   0x38289013  -disable
jtag newtap quark_se cltap  -irlen 8  -irmask 0xff  -expected-id   0x0e765013  -enable

# targets
target create arc-em.cpu arc32    -endian little -chain-position quark_se.arc-em
target create lmt.cpu    quark_se -endian little -chain-position quark_se.lmt

# enable the work area below (which is in sram) to perform the "test_mem_access" tests
# lmt.cpu configure -work-area-phys 0xa8000000 -work-area-virt 0xa8000000 -work-area-size 0x4000
lmt.cpu configure -event gdb-attach { targets lmt.cpu ; halt }

# openocd puts tap at front of chain not end of chain
# to enable the lmt core we need to set bits [1:0] to 0x1
proc quark_se_lmt_tapenable {} {
	echo "Enabling lmt core tap"
	set val [ eval { irscan quark_se.cltap 0x11 ; drscan quark_se.cltap 12 0 } ]
    set val [ format 0x%x [ expr ( ( 0x$val & 0xffc ) | 0x01 ) ] ]
	irscan quark_se.cltap 0x11
	drscan quark_se.cltap 12 $val
	runtest 10
}

# to disable the lmt core we need to set bits [1:0] to 0x0
proc quark_se_lmt_tapdisable {} {
	echo "Disabling lmt core tap"
	set val [ eval { irscan quark_se.cltap 0x11 ; drscan quark_se.cltap 12 0 } ]
	set val [ format 0x%x [ expr ( 0x$val & 0xffc ) ] ]
    irscan quark_se.cltap 0x11
	drscan quark_se.cltap 12 $val
	runtest 10
}

# to enable the arc core we need to set bits [3:2] to 0x1
proc quark_se_arc_tapenable {} {
	echo "Enabling arc core tap"
	set val [ eval { irscan quark_se.cltap 0x11 ; drscan quark_se.cltap 12 0 } ]
	set val [ format 0x%x [ expr ( ( 0x$val & 0xff3 ) | 0x04 )] ]
	irscan quark_se.cltap 0x11
	drscan quark_se.cltap 12 $val
	runtest 10
}

# to disable the arc core we need to set bits [3:2] to 0x0
proc quark_se_arc_tapdisable {} {
	echo "Disabling arc core tap"
	set val [ eval { irscan quark_se.cltap 0x11 ; drscan quark_se.cltap 12 0 } ]
	set val [ format 0x%x [ expr ( 0x$val & 0xff3 ) ] ]
	irscan quark_se.cltap 0x11
	drscan quark_se.cltap 12 $val
	runtest 10
}

proc quark_se_setup {} {
    jtag tapenable quark_se.arc-em
	jtag tapenable quark_se.lmt
}

jtag configure quark_se.lmt -event tap-enable "quark_se_lmt_tapenable"
jtag configure quark_se.lmt -event tap-disable "quark_se_lmt_tapdisable"

jtag configure quark_se.arc-em -event tap-enable "quark_se_arc_tapenable"
jtag configure quark_se.arc-em -event tap-disable "quark_se_arc_tapdisable"

jtag configure quark_se.cltap -event setup "quark_se_setup"

# utility functions for cross triggering
proc enable_x_arc2lmt_trigger {} { irscan quark_se.cltap 0x70 ; drscan quark_se.cltap 8 0x40 }
proc enable_x_lmt2arc_trigger {} { irscan quark_se.cltap 0x70 ; drscan quark_se.cltap 8 0x80 }
proc enable_x_dual_trigger {} { irscan quark_se.cltap 0x70 ; drscan quark_se.cltap 8 0xc0 }
proc disable_x_trigger {} { irscan quark_se.cltap 0x70 ; drscan quark_se.cltap 8 0x0 }
proc resume_all {} {
	set currentt [ ocd_target current ]
	set l_state [ lmt.cpu curstate ]
	set a_state [ arc-em.cpu curstate ]
	if { [ string first halt $a_state ] != -1 } { targets 0 ; resume }
	if { [ string first halt $l_state ] != -1 } { targets 1 ; resume }
	targets $currentt
}

# utility functions to delete flash
proc del_flash0 {} { mww 0xB0100018 0x80 ; sleep 2000 ; mdw 0xB0100014 }
proc del_flash1 {} { mww 0xB0200018 0x80 ; sleep 2000 ; mdw 0xB0200014 }
# utility function to delete ROM, flash0 and flash1
proc mass_erase {} { mww 0xB0100018 0xC0 ; mww 0xB0200018 0xC0 ; sleep 2000 ; mdw 0xB0100014 ; mdw 0xB0200014 }

# utility function to set SoC clock to 32MHz Si
proc clk32M { {jtag_khz 1000} } {
	# slow speed to make sure we can write mem
	adapter_khz 3
	# LMT halt
	irscan quark_se.cltap 0x70 ; drscan quark_se.cltap 8 0x1
	# ARC halt
	irscan quark_se.cltap 0x69 ; drscan quark_se.cltap 4 0x1
	# set the SoC clock to the 32 MHz Silicon one
	mww 0xB0800008 0x2
	mww 0xB0800038 0x7
	mww 0xB0800038 0x87
	# set the JTAG clock to the desired one
	adapter_khz $jtag_khz
	# clear halt flags and reset the SoC
	irscan quark_se.cltap 0x70 ; drscan quark_se.cltap 8 0x0
	irscan quark_se.cltap 0x69 ; drscan quark_se.cltap 4 0x0
	reset halt
}

# default frequency but this can be adjusted at runtime
adapter_khz 1000

reset_config trst_only
